From a47c8cf45667750f1adc1d63b35bd2f4c6f1a7ec Mon Sep 17 00:00:00 2001
From: renren-3 <131635258+renren-3@users.noreply.github.com>
Date: Wed, 24 Sep 2025 14:32:01 +0800
Subject: [PATCH 19/22] Add Netlify Functions for API endpoints

---
 logs/combined.log                        |   2 +
 logs/error.log                           |   3 +
 netlify.toml                             |   2 +-
 netlify/functions/beanie-data-records.js |  90 +++++++++++++++
 netlify/functions/beanie-data-save.js    | 139 +++++++++++++++++++++++
 netlify/functions/package.json           |   8 ++
 public/js/beanieImport.js                |   2 +-
 7 files changed, 244 insertions(+), 2 deletions(-)
 create mode 100644 netlify/functions/beanie-data-records.js
 create mode 100644 netlify/functions/beanie-data-save.js
 create mode 100644 netlify/functions/package.json

diff --git a/logs/combined.log b/logs/combined.log
index 7818f8d..eb52e23 100644
--- a/logs/combined.log
+++ b/logs/combined.log
@@ -1526,3 +1526,5 @@
 {"code":"PGRST205","details":null,"hint":null,"level":"error","message":"Database error: Could not find the table 'public.beanie_costs' in the schema cache","service":"costing-automation","timestamp":"2025-09-24T06:07:45.115Z"}
 {"level":"error","message":"Error saving beanie data: Failed to save data: Could not find the table 'public.beanie_costs' in the schema cache","service":"costing-automation","stack":"Error: Failed to save data: Could not find the table 'public.beanie_costs' in the schema cache\n    at BeanieDataService.saveBeanieData (C:\\Users\\Dell\\OneDrive\\Desktop\\cost\\Costing-Automation\\src\\services\\beanieDataService.ts:176:15)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async <anonymous> (C:\\Users\\Dell\\OneDrive\\Desktop\\cost\\Costing-Automation\\src\\routes\\beanieData.ts:38:20)","timestamp":"2025-09-24T06:07:45.117Z"}
 {"level":"error","message":"Error saving beanie data: Failed to save data: Could not find the table 'public.beanie_costs' in the schema cache","service":"costing-automation","stack":"Error: Failed to save data: Could not find the table 'public.beanie_costs' in the schema cache\n    at BeanieDataService.saveBeanieData (C:\\Users\\Dell\\OneDrive\\Desktop\\cost\\Costing-Automation\\src\\services\\beanieDataService.ts:176:15)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async <anonymous> (C:\\Users\\Dell\\OneDrive\\Desktop\\cost\\Costing-Automation\\src\\routes\\beanieData.ts:38:20)","timestamp":"2025-09-24T06:07:45.118Z"}
+{"level":"info","message":"Server running on port 3000","service":"costing-automation","timestamp":"2025-09-24T06:31:35.022Z"}
+{"level":"info","message":"Server running on port 3000","service":"costing-automation","timestamp":"2025-09-24T06:31:36.323Z"}
diff --git a/logs/error.log b/logs/error.log
index e69de29..760bfc5 100644
--- a/logs/error.log
+++ b/logs/error.log
@@ -0,0 +1,3 @@
+{"code":"PGRST205","details":null,"hint":null,"level":"error","message":"Database error: Could not find the table 'public.beanie_costs' in the schema cache","service":"costing-automation","timestamp":"2025-09-24T06:07:45.115Z"}
+{"level":"error","message":"Error saving beanie data: Failed to save data: Could not find the table 'public.beanie_costs' in the schema cache","service":"costing-automation","stack":"Error: Failed to save data: Could not find the table 'public.beanie_costs' in the schema cache\n    at BeanieDataService.saveBeanieData (C:\\Users\\Dell\\OneDrive\\Desktop\\cost\\Costing-Automation\\src\\services\\beanieDataService.ts:176:15)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async <anonymous> (C:\\Users\\Dell\\OneDrive\\Desktop\\cost\\Costing-Automation\\src\\routes\\beanieData.ts:38:20)","timestamp":"2025-09-24T06:07:45.117Z"}
+{"level":"error","message":"Error saving beanie data: Failed to save data: Could not find the table 'public.beanie_costs' in the schema cache","service":"costing-automation","stack":"Error: Failed to save data: Could not find the table 'public.beanie_costs' in the schema cache\n    at BeanieDataService.saveBeanieData (C:\\Users\\Dell\\OneDrive\\Desktop\\cost\\Costing-Automation\\src\\services\\beanieDataService.ts:176:15)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async <anonymous> (C:\\Users\\Dell\\OneDrive\\Desktop\\cost\\Costing-Automation\\src\\routes\\beanieData.ts:38:20)","timestamp":"2025-09-24T06:07:45.118Z"}
diff --git a/netlify.toml b/netlify.toml
index fb83a39..0ceff3f 100644
--- a/netlify.toml
+++ b/netlify.toml
@@ -5,7 +5,7 @@
   # Directory to publish - Netlify will serve from the public folder
   publish = "public"
   
-  # Functions directory for serverless functions (if needed)
+  # Functions directory for serverless functions
   functions = "netlify/functions"
 
 [build.environment]
diff --git a/netlify/functions/beanie-data-records.js b/netlify/functions/beanie-data-records.js
new file mode 100644
index 0000000..0cdf2e2
--- /dev/null
+++ b/netlify/functions/beanie-data-records.js
@@ -0,0 +1,90 @@
+const { createClient } = require('@supabase/supabase-js');
+
+exports.handler = async (event, context) => {
+  // Set CORS headers
+  const headers = {
+    'Access-Control-Allow-Origin': '*',
+    'Access-Control-Allow-Headers': 'Content-Type',
+    'Access-Control-Allow-Methods': 'GET, OPTIONS',
+    'Content-Type': 'application/json'
+  };
+
+  // Handle preflight OPTIONS request
+  if (event.httpMethod === 'OPTIONS') {
+    return {
+      statusCode: 200,
+      headers,
+      body: ''
+    };
+  }
+
+  // Only allow GET requests
+  if (event.httpMethod !== 'GET') {
+    return {
+      statusCode: 405,
+      headers,
+      body: JSON.stringify({ error: 'Method not allowed' })
+    };
+  }
+
+  try {
+    // Get table name from query parameters
+    const { tableName } = event.queryStringParameters || {};
+    const finalTableName = tableName || 'beanie_costs';
+
+    // Initialize Supabase client
+    const supabaseUrl = process.env.SUPABASE_URL;
+    const supabaseKey = process.env.SUPABASE_ANON_KEY;
+    
+    if (!supabaseUrl || !supabaseKey) {
+      return {
+        statusCode: 500,
+        headers,
+        body: JSON.stringify({ 
+          success: false, 
+          error: 'Supabase configuration missing' 
+        })
+      };
+    }
+
+    const supabase = createClient(supabaseUrl, supabaseKey);
+
+    // Fetch records from Supabase
+    const { data: records, error } = await supabase
+      .from(finalTableName)
+      .select('*')
+      .order('created_at', { ascending: false });
+
+    if (error) {
+      console.error('Supabase query error:', error);
+      return {
+        statusCode: 500,
+        headers,
+        body: JSON.stringify({
+          success: false,
+          error: 'Failed to fetch records from database'
+        })
+      };
+    }
+
+    return {
+      statusCode: 200,
+      headers,
+      body: JSON.stringify({
+        success: true,
+        data: records
+      })
+    };
+
+  } catch (error) {
+    console.error('Function error:', error);
+    return {
+      statusCode: 500,
+      headers,
+      body: JSON.stringify({
+        success: false,
+        error: error.message || 'Unknown error occurred'
+      })
+    };
+  }
+};
diff --git a/netlify/functions/beanie-data-save.js b/netlify/functions/beanie-data-save.js
new file mode 100644
index 0000000..d7462f3
--- /dev/null
+++ b/netlify/functions/beanie-data-save.js
@@ -0,0 +1,139 @@
+const { createClient } = require('@supabase/supabase-js');
+
+exports.handler = async (event, context) => {
+  // Set CORS headers
+  const headers = {
+    'Access-Control-Allow-Origin': '*',
+    'Access-Control-Allow-Headers': 'Content-Type',
+    'Access-Control-Allow-Methods': 'POST, OPTIONS',
+    'Content-Type': 'application/json'
+  };
+
+  // Handle preflight OPTIONS request
+  if (event.httpMethod === 'OPTIONS') {
+    return {
+      statusCode: 200,
+      headers,
+      body: ''
+    };
+  }
+
+  // Only allow POST requests
+  if (event.httpMethod !== 'POST') {
+    return {
+      statusCode: 405,
+      headers,
+      body: JSON.stringify({ error: 'Method not allowed' })
+    };
+  }
+
+  try {
+    // Parse request body
+    const { data, tableName } = JSON.parse(event.body);
+    
+    if (!data) {
+      return {
+        statusCode: 400,
+        headers,
+        body: JSON.stringify({ 
+          success: false, 
+          error: 'No data provided' 
+        })
+      };
+    }
+
+    // Initialize Supabase client
+    const supabaseUrl = process.env.SUPABASE_URL;
+    const supabaseKey = process.env.SUPABASE_ANON_KEY;
+    
+    if (!supabaseUrl || !supabaseKey) {
+      return {
+        statusCode: 500,
+        headers,
+        body: JSON.stringify({ 
+          success: false, 
+          error: 'Supabase configuration missing' 
+        })
+      };
+    }
+
+    const supabase = createClient(supabaseUrl, supabaseKey);
+
+    // Use the provided table name or default to 'beanie_costs'
+    const finalTableName = tableName || 'beanie_costs';
+
+    // Check if table exists by trying to query it
+    const { error: tableError } = await supabase
+      .from(finalTableName)
+      .select('*')
+      .limit(1);
+
+    if (tableError) {
+      return {
+        statusCode: 400,
+        headers,
+        body: JSON.stringify({
+          success: false,
+          error: `Table '${finalTableName}' does not exist. Please create it in your Supabase dashboard.`
+        })
+      };
+    }
+
+    // Prepare data for insertion
+    const insertData = {
+      customer: data.customer,
+      season: data.season,
+      style_number: data.styleNumber,
+      style_name: data.styleName,
+      costed_quantity: data.costedQuantity,
+      leadtime: data.leadtime,
+      yarn: JSON.stringify(data.yarn || []),
+      fabric: JSON.stringify(data.fabric || []),
+      trim: JSON.stringify(data.trim || []),
+      knitting: JSON.stringify(data.knitting || []),
+      operations: JSON.stringify(data.operations || []),
+      packaging: JSON.stringify(data.packaging || []),
+      overhead: JSON.stringify(data.overhead || []),
+      created_at: new Date().toISOString()
+    };
+
+    // Insert data into Supabase
+    const { data: result, error: insertError } = await supabase
+      .from(finalTableName)
+      .insert([insertData])
+      .select();
+
+    if (insertError) {
+      console.error('Supabase insert error:', insertError);
+      return {
+        statusCode: 500,
+        headers,
+        body: JSON.stringify({
+          success: false,
+          error: 'Failed to save data to database'
+        })
+      };
+    }
+
+    return {
+      statusCode: 200,
+      headers,
+      body: JSON.stringify({
+        success: true,
+        message: 'Beanie data saved successfully',
+        data: result
+      })
+    };
+
+  } catch (error) {
+    console.error('Function error:', error);
+    return {
+      statusCode: 500,
+      headers,
+      body: JSON.stringify({
+        success: false,
+        error: error.message || 'Unknown error occurred'
+      })
+    };
+  }
+};
diff --git a/netlify/functions/package.json b/netlify/functions/package.json
new file mode 100644
index 0000000..0b7e19b
--- /dev/null
+++ b/netlify/functions/package.json
@@ -0,0 +1,8 @@
+{
+  "name": "netlify-functions",
+  "version": "1.0.0",
+  "description": "Netlify Functions for Costing Automation",
+  "dependencies": {
+    "@supabase/supabase-js": "^2.38.4"
+  }
+}
diff --git a/public/js/beanieImport.js b/public/js/beanieImport.js
index b159f02..7333369 100644
--- a/public/js/beanieImport.js
+++ b/public/js/beanieImport.js
@@ -431,7 +431,7 @@ class TNFBeanieImporter {
                 totalFactoryCost: data.totalFactoryCost
             });
 
-            const response = await fetch('/api/beanie-data/save', {
+            const response = await fetch('/.netlify/functions/beanie-data-save', {
                 method: 'POST',
                 headers: {
                     'Content-Type': 'application/json',
-- 
2.51.0.windows.1

