From dfd8c6aff67b68a3f309aee1dae13a73b9b84265 Mon Sep 17 00:00:00 2001
From: renren-3 <131635258+renren-3@users.noreply.github.com>
Date: Mon, 22 Sep 2025 09:34:52 +0800
Subject: [PATCH 11/22] Add image extraction functionality and fix drag & drop
 debugging

---
 logs/combined.log           |  26 ++++
 public/index.html           | 245 +++++++++++++++++++++++++++++++---
 public/js/ballcapsImport.js |  29 ++--
 public/js/beanieImport.js   |  37 ++++--
 public/js/excelUtils.js     | 255 +++++++++++++++++++++++++++++++++++-
 5 files changed, 553 insertions(+), 39 deletions(-)

diff --git a/logs/combined.log b/logs/combined.log
index c3fc959..2f0c552 100644
--- a/logs/combined.log
+++ b/logs/combined.log
@@ -470,3 +470,29 @@
 {"level":"info","message":"Fetched batch: 1000 records (total so far: 2000)","service":"costing-automation","timestamp":"2025-09-19T08:56:53.019Z"}
 {"level":"info","message":"Fetched batch: 784 records (total so far: 2784)","service":"costing-automation","timestamp":"2025-09-19T08:56:53.180Z"}
 {"level":"info","message":"Final result: 2784 records loaded, total count: 2784","service":"costing-automation","timestamp":"2025-09-19T08:56:53.180Z"}
+{"level":"info","message":"Server running on port 3000","service":"costing-automation","timestamp":"2025-09-22T01:13:43.606Z"}
+{"level":"info","message":"Total records in database: 2784","service":"costing-automation","timestamp":"2025-09-22T01:13:52.978Z"}
+{"level":"info","message":"Fetched batch: 1000 records (total so far: 1000)","service":"costing-automation","timestamp":"2025-09-22T01:13:54.633Z"}
+{"level":"info","message":"Fetched batch: 1000 records (total so far: 2000)","service":"costing-automation","timestamp":"2025-09-22T01:13:56.230Z"}
+{"level":"info","message":"Fetched batch: 784 records (total so far: 2784)","service":"costing-automation","timestamp":"2025-09-22T01:13:56.931Z"}
+{"level":"info","message":"Final result: 2784 records loaded, total count: 2784","service":"costing-automation","timestamp":"2025-09-22T01:13:56.932Z"}
+{"level":"info","message":"Total records in database: 2784","service":"costing-automation","timestamp":"2025-09-22T01:17:56.600Z"}
+{"level":"info","message":"Fetched batch: 1000 records (total so far: 1000)","service":"costing-automation","timestamp":"2025-09-22T01:17:57.051Z"}
+{"level":"info","message":"Fetched batch: 1000 records (total so far: 2000)","service":"costing-automation","timestamp":"2025-09-22T01:17:57.451Z"}
+{"level":"info","message":"Fetched batch: 784 records (total so far: 2784)","service":"costing-automation","timestamp":"2025-09-22T01:17:57.742Z"}
+{"level":"info","message":"Final result: 2784 records loaded, total count: 2784","service":"costing-automation","timestamp":"2025-09-22T01:17:57.743Z"}
+{"level":"info","message":"Total records in database: 2784","service":"costing-automation","timestamp":"2025-09-22T01:22:19.489Z"}
+{"level":"info","message":"Fetched batch: 1000 records (total so far: 1000)","service":"costing-automation","timestamp":"2025-09-22T01:22:19.934Z"}
+{"level":"info","message":"Fetched batch: 1000 records (total so far: 2000)","service":"costing-automation","timestamp":"2025-09-22T01:22:20.241Z"}
+{"level":"info","message":"Fetched batch: 784 records (total so far: 2784)","service":"costing-automation","timestamp":"2025-09-22T01:22:20.429Z"}
+{"level":"info","message":"Final result: 2784 records loaded, total count: 2784","service":"costing-automation","timestamp":"2025-09-22T01:22:20.429Z"}
+{"level":"info","message":"Total records in database: 2784","service":"costing-automation","timestamp":"2025-09-22T01:23:17.031Z"}
+{"level":"info","message":"Fetched batch: 1000 records (total so far: 1000)","service":"costing-automation","timestamp":"2025-09-22T01:23:17.781Z"}
+{"level":"info","message":"Fetched batch: 1000 records (total so far: 2000)","service":"costing-automation","timestamp":"2025-09-22T01:23:18.060Z"}
+{"level":"info","message":"Fetched batch: 784 records (total so far: 2784)","service":"costing-automation","timestamp":"2025-09-22T01:23:18.312Z"}
+{"level":"info","message":"Final result: 2784 records loaded, total count: 2784","service":"costing-automation","timestamp":"2025-09-22T01:23:18.312Z"}
+{"level":"info","message":"Total records in database: 2784","service":"costing-automation","timestamp":"2025-09-22T01:25:47.608Z"}
+{"level":"info","message":"Fetched batch: 1000 records (total so far: 1000)","service":"costing-automation","timestamp":"2025-09-22T01:25:48.137Z"}
+{"level":"info","message":"Fetched batch: 1000 records (total so far: 2000)","service":"costing-automation","timestamp":"2025-09-22T01:25:48.612Z"}
+{"level":"info","message":"Fetched batch: 784 records (total so far: 2784)","service":"costing-automation","timestamp":"2025-09-22T01:25:48.931Z"}
+{"level":"info","message":"Final result: 2784 records loaded, total count: 2784","service":"costing-automation","timestamp":"2025-09-22T01:25:48.932Z"}
diff --git a/public/index.html b/public/index.html
index 47cd9cc..b97c9ad 100644
--- a/public/index.html
+++ b/public/index.html
@@ -2536,6 +2536,126 @@
             console.log('🔧 Enhanced with fallback XLSX loading for reliability');
         };
 
+        // Debug function to test image extraction
+        window.testImageExtraction = function() {
+            console.log('🖼️ TESTING IMAGE EXTRACTION');
+            console.log('==');
+            
+            if (!window.lastExcelData) {
+                console.log('❌ No Excel data available. Please upload an Excel file first.');
+                return;
+            }
+            
+            console.log('Raw Excel data structure:', window.lastExcelData);
+            
+            if (window.lastExcelData.images) {
+                console.log('✅ Found', window.lastExcelData.images.length, 'embedded images:');
+                window.lastExcelData.images.forEach((image, index) => {
+                    console.log(`  Image ${index + 1}:`, {
+                        id: image.id,
+                        mimeType: image.mimeType,
+                        size: image.size,
+                        position: image.position,
+                        dataUrl: image.dataUrl.substring(0, 50) + '...'
+                    });
+                });
+                
+                // Test displaying the first image
+                if (window.lastExcelData.images.length > 0) {
+                    console.log('🎯 Testing image display...');
+                    displayProductImages(window.lastExcelData.images);
+                }
+            } else {
+                console.log('❌ No images found in Excel data');
+                console.log('This could mean:');
+                console.log('- The Excel file has no embedded images');
+                console.log('- Images are in a format not supported by XLSX.js');
+                console.log('- Images are stored in a different location in the Excel file');
+            }
+        };
+
+        // Debug function to analyze Excel file structure
+        window.analyzeExcelStructure = function() {
+            console.log('🔍 ANALYZING EXCEL FILE STRUCTURE');
+            console.log('==');
+            
+            if (!window.lastExcelData) {
+                console.log('❌ No Excel data available. Please upload an Excel file first.');
+                return;
+            }
+            
+            console.log('Excel data type:', typeof window.lastExcelData);
+            console.log('Excel data keys:', Object.keys(window.lastExcelData));
+            
+            if (window.lastExcelData.data) {
+                console.log('Data array length:', window.lastExcelData.data.length);
+                console.log('First few rows:', window.lastExcelData.data.slice(0, 3));
+            }
+            
+            if (window.lastExcelData.images) {
+                console.log('Images found:', window.lastExcelData.images.length);
+            } else {
+                console.log('No images property found');
+            }
+            
+            // Check if it's the old format
+            if (Array.isArray(window.lastExcelData)) {
+                console.log('⚠️ Using old array format - images may not be extracted');
+                console.log('Consider re-uploading the file to get the new format with image support');
+            }
+        };
+
+        // Debug function to test drag and drop functionality
+        window.testDragDrop = function() {
+            console.log('🎯 TESTING DRAG & DROP FUNCTIONALITY');
+            console.log('==');
+            
+            const dragDropAreas = document.querySelectorAll('.drag-drop-area');
+            console.log('Found drag drop areas:', dragDropAreas.length);
+            
+            dragDropAreas.forEach((area, index) => {
+                console.log(`Area ${index + 1}:`, {
+                    element: area,
+                    classes: area.className,
+                    style: area.style.cssText,
+                    hasListeners: area.ondrop !== null || area.ondragover !== null
+                });
+            });
+            
+            // Test if event listeners are attached
+            const testArea = dragDropAreas[0];
+            if (testArea) {
+                console.log('Testing event listeners on first area...');
+                
+                // Simulate drag events
+                const dragEnterEvent = new DragEvent('dragenter', {
+                    bubbles: true,
+                    cancelable: true,
+                    dataTransfer: new DataTransfer()
+                });
+                
+                const dragOverEvent = new DragEvent('dragover', {
+                    bubbles: true,
+                    cancelable: true,
+                    dataTransfer: new DataTransfer()
+                });
+                
+                console.log('Simulating dragenter event...');
+                testArea.dispatchEvent(dragEnterEvent);
+                
+                console.log('Simulating dragover event...');
+                testArea.dispatchEvent(dragOverEvent);
+                
+                console.log('Drag over class applied:', testArea.classList.contains('drag-over'));
+            }
+            
+            console.log('💡 If drag & drop is not working:');
+            console.log('1. Check browser console for JavaScript errors');
+            console.log('2. Make sure the page is fully loaded');
+            console.log('3. Try refreshing the page');
+            console.log('4. Check if file types are supported');
+        };
+
         // Test XLSX loading status
         window.testXLSXStatus = function() {
             console.log('🔍 XLSX Library Status Check');
@@ -3668,23 +3788,42 @@
         }
 
         function highlight(e, dragDropArea) {
+            console.log('🎯 Highlight called');
             dragDropArea.classList.add('drag-over');
         }
 
         function unhighlight(e, dragDropArea) {
+            console.log('🎯 Unhighlight called');
             dragDropArea.classList.remove('drag-over');
         }
 
         function handleDrop(e, dragDropArea) {
+            console.log('🎯 Handle drop called');
+            e.preventDefault();
+            e.stopPropagation();
+            
             const dt = e.dataTransfer;
             const files = dt.files;
             
+            console.log('Files dropped:', files.length);
+            
             if (files.length > 0) {
                 const file = files[0];
-                console.log('File dropped:', file.name, file.type);
+                console.log('File dropped:', file.name, file.type, file.size);
+                
+                // Validate file type
+                const allowedTypes = ['.xlsx', '.xls', '.xlsm', '.csv'];
+                const fileExtension = '.' + file.name.split('.').pop().toLowerCase();
+                
+                if (!allowedTypes.includes(fileExtension)) {
+                    console.error('Invalid file type:', fileExtension);
+                    alert('Please select a valid file type (.xlsx, .xls, .xlsm, .csv)');
+                    return;
+                }
                 
                 // Store the file globally for processing
                 uploadedFile = file;
+                console.log('File stored globally:', uploadedFile.name);
                 
                 // Update the specific drag drop area to show file name
                 const dragDropText = dragDropArea.querySelector('.drag-drop-text');
@@ -3693,7 +3832,12 @@
                 if (dragDropText && dragDropIcon) {
                     dragDropIcon.textContent = '✅';
                     dragDropText.innerHTML = `File: ${file.name}<br><small>Click to change</small>`;
+                    console.log('Drag drop area updated with file name');
+                } else {
+                    console.error('Could not find drag drop text or icon elements');
                 }
+            } else {
+                console.log('No files in drop event');
             }
         }
 
@@ -3785,9 +3929,16 @@
                 window.lastExcelData = rawData;
                 console.log('Raw Excel data stored in window.lastExcelData for debugging');
                 
+                // Handle both old array format and new object format
+                let dataToProcess = rawData;
+                if (rawData && typeof rawData === 'object' && !Array.isArray(rawData)) {
+                    dataToProcess = rawData.data || rawData;
+                    console.log('Found', rawData.images ? rawData.images.length : 0, 'embedded images');
+                }
+                
                 // Determine which importer to use based on file content
                 let parsedData = null;
-                const templateType = detectTemplateType(rawData);
+                const templateType = detectTemplateType(dataToProcess);
                 console.log('Detected template type:', templateType);
                 
                 if (templateType === 'ballcaps') {
@@ -3814,6 +3965,9 @@
                     } else {
                         fillTemplateWithData(parsedData);
                     }
+                    
+                    // Display product images if available
+                    displayProductImages(parsedData.images);
                 }
                     
                 } catch (error) {
@@ -3953,6 +4107,38 @@
             console.log(`Subtotal calculated for ${costColumn}: $${total.toFixed(2)}`);
         }
 
+        function displayProductImages(images) {
+            if (!images || images.length === 0) {
+                console.log('No product images to display');
+                return;
+            }
+            
+            console.log('Displaying', images.length, 'product images');
+            
+            // Find all product image containers in both templates
+            const imageContainers = document.querySelectorAll('.product-image');
+            
+            imageContainers.forEach(container => {
+                const placeholder = container.querySelector('.image-placeholder');
+                if (placeholder && images.length > 0) {
+                    // Use the first image found
+                    const image = images[0];
+                    
+                    // Create image element
+                    const img = document.createElement('img');
+                    img.src = image.dataUrl;
+                    img.alt = 'Product Image';
+                    img.style.cssText = 'max-width: 100%; max-height: 300px; border-radius: 8px; box-shadow: 0 4px 12px rgba(0,0,0,0.2);';
+                    
+                    // Replace placeholder with actual image
+                    placeholder.innerHTML = '';
+                    placeholder.appendChild(img);
+                    
+                    console.log('✅ Product image displayed:', image.mimeType, image.size, 'bytes');
+                }
+            });
+        }
+
         function updateTotals(materialTotal, factoryTotal) {
             // Only update totals in the currently visible template
             const visibleTemplate = document.querySelector('.cost-breakdown-container:not([style*="display: none"])');
@@ -3975,25 +4161,50 @@
 
         // Initialize drag & drop when page loads
         document.addEventListener('DOMContentLoaded', function() {
-            initializeDragDrop();
+            console.log('🚀 DOM Content Loaded - Initializing drag & drop...');
+            
+            try {
+                initializeDragDrop();
+                console.log('✅ Drag & drop initialized successfully');
+            } catch (error) {
+                console.error('❌ Error initializing drag & drop:', error);
+            }
             
             // Add file input for click functionality
-            const fileInput = document.createElement('input');
-            fileInput.type = 'file';
-            fileInput.accept = '.xlsx,.xls,.xlsm,.csv';
-            fileInput.style.display = 'none';
-            fileInput.onchange = handleFileSelect;
-            fileInput.id = 'hiddenFileInput';
-            document.body.appendChild(fileInput);
+            try {
+                const fileInput = document.createElement('input');
+                fileInput.type = 'file';
+                fileInput.accept = '.xlsx,.xls,.xlsm,.csv';
+                fileInput.style.display = 'none';
+                fileInput.onchange = handleFileSelect;
+                fileInput.id = 'hiddenFileInput';
+                document.body.appendChild(fileInput);
+                console.log('✅ File input created successfully');
+            } catch (error) {
+                console.error('❌ Error creating file input:', error);
+            }
             
             // Make drag drop areas clickable
-            const dragDropAreas = document.querySelectorAll('.drag-drop-area');
-            dragDropAreas.forEach(area => {
-                area.style.cursor = 'pointer';
-                area.onclick = function() {
-                    fileInput.click();
-                };
-            });
+            try {
+                const dragDropAreas = document.querySelectorAll('.drag-drop-area');
+                console.log('Found drag drop areas for click:', dragDropAreas.length);
+                
+                dragDropAreas.forEach((area, index) => {
+                    area.style.cursor = 'pointer';
+                    area.onclick = function() {
+                        console.log('Drag drop area clicked:', index);
+                        const fileInput = document.getElementById('hiddenFileInput');
+                        if (fileInput) {
+                            fileInput.click();
+                        } else {
+                            console.error('File input not found');
+                        }
+                    };
+                });
+                console.log('✅ Drag drop areas made clickable');
+            } catch (error) {
+                console.error('❌ Error making drag drop areas clickable:', error);
+            }
         });
 
         // Export table data to Excel
diff --git a/public/js/ballcapsImport.js b/public/js/ballcapsImport.js
index 3f686c2..6f5b939 100644
--- a/public/js/ballcapsImport.js
+++ b/public/js/ballcapsImport.js
@@ -10,15 +10,25 @@ class TNFBallCapsImporter {
 
     /**
      * Parse TNF Excel data into structured format for ball caps
-     * @param {Array} excelData - Raw Excel data from XLSX library
+     * @param {Object|Array} excelData - Raw Excel data from XLSX library (can be array or object with data/images)
      * @returns {Object} Parsed cost breakdown data
      */
     parseExcelData(excelData) {
-        if (!excelData || excelData.length === 0) {
+        // Handle both old array format and new object format with images
+        let data = excelData;
+        let images = [];
+        
+        if (excelData && typeof excelData === 'object' && !Array.isArray(excelData)) {
+            data = excelData.data || excelData;
+            images = excelData.images || [];
+        }
+        
+        if (!data || data.length === 0) {
             throw new Error('No data found in the Excel file');
         }
 
-        console.log('Processing TNF Ball Caps Excel data with', excelData.length, 'rows');
+        console.log('Processing TNF Ball Caps Excel data with', data.length, 'rows');
+        console.log('Found', images.length, 'embedded images');
 
         const result = {
             customer: "TNF",
@@ -37,14 +47,17 @@ class TNFBallCapsImporter {
             overhead: [],
             
             totalMaterialCost: "0.00",
-            totalFactoryCost: "0.00"
+            totalFactoryCost: "0.00",
+            
+            // Add images array
+            images: images
         };
 
         // FLEXIBLE PARSING - Search through all rows for data patterns
         try {
             // Search for basic info in any row
-            for (let i = 0; i < excelData.length; i++) {
-                const row = excelData[i];
+            for (let i = 0; i < data.length; i++) {
+                const row = data[i];
                 if (!row) continue;
                 
                 // Look for Customer info
@@ -80,8 +93,8 @@ class TNFBallCapsImporter {
             // FLEXIBLE COST DATA PARSING - Search through all rows
             let currentSection = '';
             
-            for (let i = 0; i < excelData.length; i++) {
-                const row = excelData[i];
+            for (let i = 0; i < data.length; i++) {
+                const row = data[i];
                 if (!row || row.length === 0) continue;
                 
                 const firstCell = String(row[0] || '').trim();
diff --git a/public/js/beanieImport.js b/public/js/beanieImport.js
index 92b5141..8b09293 100644
--- a/public/js/beanieImport.js
+++ b/public/js/beanieImport.js
@@ -10,24 +10,34 @@ class TNFBeanieImporter {
 
     /**
      * Parse TNF Excel data into structured format - DIRECT MAPPING APPROACH
-     * @param {Array} excelData - Raw Excel data from XLSX library
+     * @param {Object|Array} excelData - Raw Excel data from XLSX library (can be array or object with data/images)
      * @returns {Object} Parsed cost breakdown data
      */
     parseExcelData(excelData) {
-        if (!excelData || excelData.length === 0) {
+        // Handle both old array format and new object format with images
+        let data = excelData;
+        let images = [];
+        
+        if (excelData && typeof excelData === 'object' && !Array.isArray(excelData)) {
+            data = excelData.data || excelData;
+            images = excelData.images || [];
+        }
+        
+        if (!data || data.length === 0) {
             throw new Error('No data found in the Excel file');
         }
 
-        console.log('Processing TNF Beanie Excel data with', excelData.length, 'rows');
+        console.log('Processing TNF Beanie Excel data with', data.length, 'rows');
         console.log('=== USING DIRECT MAPPING APPROACH ===');
-        console.log('First 10 rows of raw data:', excelData.slice(0, 10));
-        console.log('All rows of raw data:', excelData);
+        console.log('First 10 rows of raw data:', data.slice(0, 10));
+        console.log('All rows of raw data:', data);
+        console.log('Found', images.length, 'embedded images');
         
         // Check if this is the correct data by looking for VANS
         let hasVANS = false;
         let hasTNF = false;
-        for (let i = 0; i < Math.min(20, excelData.length); i++) {
-            const row = excelData[i];
+        for (let i = 0; i < Math.min(20, data.length); i++) {
+            const row = data[i];
             if (row) {
                 for (let j = 0; j < row.length; j++) {
                     const cell = String(row[j] || '').trim();
@@ -56,14 +66,17 @@ class TNFBeanieImporter {
             overhead: [],
             
             totalMaterialCost: "0.00",
-            totalFactoryCost: "0.00"
+            totalFactoryCost: "0.00",
+            
+            // Add images array
+            images: images
         };
 
         // FLEXIBLE PARSING - Search through all rows for data patterns
         try {
             // Search for basic info in any row
-            for (let i = 0; i < excelData.length; i++) {
-                const row = excelData[i];
+            for (let i = 0; i < data.length; i++) {
+                const row = data[i];
                 if (!row) continue;
                 
                     // Look for Customer info
@@ -100,8 +113,8 @@ class TNFBeanieImporter {
             // FLEXIBLE COST DATA PARSING - Search through all rows
             let currentSection = '';
             
-            for (let i = 0; i < excelData.length; i++) {
-                const row = excelData[i];
+            for (let i = 0; i < data.length; i++) {
+                const row = data[i];
                 if (!row || row.length === 0) continue;
                 
                 const firstCell = String(row[0] || '').trim();
diff --git a/public/js/excelUtils.js b/public/js/excelUtils.js
index a044285..aa3b73f 100644
--- a/public/js/excelUtils.js
+++ b/public/js/excelUtils.js
@@ -112,7 +112,12 @@ class ExcelUtils {
                     const fileType = this.getFileType(file.name);
                     
                     if (fileType === 'csv') {
-                        resolve(this.parseCSV(e.target.result));
+                        const csvData = this.parseCSV(e.target.result);
+                        resolve({
+                            data: csvData,
+                            images: [],
+                            sheetName: 'CSV Data'
+                        });
                     } else {
                         // For Excel files, ensure XLSX is loaded
                         console.log(`Processing ${fileType.toUpperCase()} file...`);
@@ -149,6 +154,14 @@ class ExcelUtils {
                         // Look for VANS data in any sheet
                         let targetSheet = null;
                         let targetSheetName = null;
+                        let allImages = [];
+                        
+                        // First, check for images at workbook level
+                        console.log('🔍 Checking workbook level for images...');
+                        if (workbook['!images']) {
+                            console.log('Found images at workbook level:', Object.keys(workbook['!images']).length);
+                            allImages = allImages.concat(this.extractImagesFromWorkbook(workbook));
+                        }
                         
                         for (let i = 0; i < workbook.SheetNames.length; i++) {
                             const sheetName = workbook.SheetNames[i];
@@ -200,8 +213,21 @@ class ExcelUtils {
                             raw: true  // Use raw values for speed
                         });
                         
+                        // Extract embedded images from the worksheet
+                        const worksheetImages = this.extractImagesFromWorksheet(worksheet);
+                        
+                        // Combine workbook and worksheet images
+                        const allImages = allImages.concat(worksheetImages);
+                        
                         console.log(`Excel file processed: ${jsonData.length} rows, ${jsonData[0] ? jsonData[0].length : 0} columns`);
-                        resolve(jsonData);
+                        console.log(`Found ${allImages.length} embedded images total`);
+                        
+                        // Return data with images
+                        resolve({
+                            data: jsonData,
+                            images: allImages,
+                            sheetName: targetSheetName
+                        });
                     }
                 } catch (error) {
                     reject(error);
@@ -279,6 +305,231 @@ class ExcelUtils {
         }
     }
 
+    /**
+     * Extract embedded images from Excel workbook
+     */
+    extractImagesFromWorkbook(workbook) {
+        const images = [];
+        
+        try {
+            console.log('🔍 Extracting images from workbook level...');
+            
+            if (workbook['!images']) {
+                const imageData = workbook['!images'];
+                console.log('Found workbook images:', Object.keys(imageData).length);
+                
+                Object.keys(imageData).forEach(key => {
+                    const image = imageData[key];
+                    if (image && image.data) {
+                        try {
+                            let mimeType = 'image/png';
+                            
+                            // Detect image type
+                            if (image.data[0] === 0xFF && image.data[1] === 0xD8) {
+                                mimeType = 'image/jpeg';
+                            } else if (image.data[0] === 0x89 && image.data[1] === 0x50) {
+                                mimeType = 'image/png';
+                            } else if (image.data[0] === 0x47 && image.data[1] === 0x49) {
+                                mimeType = 'image/gif';
+                            }
+                            
+                            const base64 = btoa(String.fromCharCode.apply(null, image.data));
+                            const dataUrl = `data:${mimeType};base64,${base64}`;
+                            
+                            images.push({
+                                id: `workbook_${key}`,
+                                dataUrl: dataUrl,
+                                mimeType: mimeType,
+                                position: image.position || null,
+                                size: image.data.length
+                            });
+                            
+                            console.log(`✅ Extracted workbook image ${key}: ${mimeType}, ${image.data.length} bytes`);
+                        } catch (imgError) {
+                            console.warn(`Failed to process workbook image ${key}:`, imgError);
+                        }
+                    }
+                });
+            }
+            
+        } catch (error) {
+            console.warn('Error extracting images from workbook:', error);
+        }
+        
+        return images;
+    }
+
+    /**
+     * Extract embedded images from Excel worksheet
+     */
+    extractImagesFromWorksheet(worksheet) {
+        const images = [];
+        
+        try {
+            console.log('🔍 Searching for images in worksheet...');
+            console.log('Worksheet properties:', Object.keys(worksheet));
+            
+            // Method 1: Check for !images property
+            if (worksheet['!images']) {
+                console.log('Found !images property with', Object.keys(worksheet['!images']).length, 'items');
+                const imageData = worksheet['!images'];
+                
+                Object.keys(imageData).forEach(key => {
+                    const image = imageData[key];
+                    console.log(`Processing image ${key}:`, image);
+                    
+                    if (image && image.data) {
+                        try {
+                            // Convert binary data to base64 data URL
+                            let mimeType = 'image/png'; // Default to PNG
+                            
+                            // Try to detect image type from the data
+                            if (image.data[0] === 0xFF && image.data[1] === 0xD8) {
+                                mimeType = 'image/jpeg';
+                            } else if (image.data[0] === 0x89 && image.data[1] === 0x50) {
+                                mimeType = 'image/png';
+                            } else if (image.data[0] === 0x47 && image.data[1] === 0x49) {
+                                mimeType = 'image/gif';
+                            }
+                            
+                            // Convert binary data to base64
+                            const base64 = btoa(String.fromCharCode.apply(null, image.data));
+                            const dataUrl = `data:${mimeType};base64,${base64}`;
+                            
+                            images.push({
+                                id: key,
+                                dataUrl: dataUrl,
+                                mimeType: mimeType,
+                                position: image.position || null,
+                                size: image.data.length
+                            });
+                            
+                            console.log(`✅ Extracted image ${key}: ${mimeType}, ${image.data.length} bytes`);
+                        } catch (imgError) {
+                            console.warn(`Failed to process image ${key}:`, imgError);
+                        }
+                    }
+                });
+            }
+            
+            // Method 2: Check for !drawings property
+            if (worksheet['!drawings']) {
+                console.log('Found !drawings property with', Object.keys(worksheet['!drawings']).length, 'items');
+                const drawingData = worksheet['!drawings'];
+                
+                Object.keys(drawingData).forEach(key => {
+                    const drawing = drawingData[key];
+                    console.log(`Processing drawing ${key}:`, drawing);
+                    
+                    if (drawing && drawing.data) {
+                        try {
+                            let mimeType = 'image/png';
+                            
+                            // Detect image type
+                            if (drawing.data[0] === 0xFF && drawing.data[1] === 0xD8) {
+                                mimeType = 'image/jpeg';
+                            } else if (drawing.data[0] === 0x89 && drawing.data[1] === 0x50) {
+                                mimeType = 'image/png';
+                            } else if (drawing.data[0] === 0x47 && drawing.data[1] === 0x49) {
+                                mimeType = 'image/gif';
+                            }
+                            
+                            const base64 = btoa(String.fromCharCode.apply(null, drawing.data));
+                            const dataUrl = `data:${mimeType};base64,${base64}`;
+                            
+                            images.push({
+                                id: `drawing_${key}`,
+                                dataUrl: dataUrl,
+                                mimeType: mimeType,
+                                position: drawing.position || null,
+                                size: drawing.data.length
+                            });
+                            
+                            console.log(`✅ Extracted drawing ${key}: ${mimeType}, ${drawing.data.length} bytes`);
+                        } catch (drawingError) {
+                            console.warn(`Failed to process drawing ${key}:`, drawingError);
+                        }
+                    }
+                });
+            }
+            
+            // Method 3: Check for images in cell data
+            if (images.length === 0) {
+                console.log('No images found in !images or !drawings, checking cell data...');
+                
+                const range = XLSX.utils.decode_range(worksheet['!ref'] || 'A1:A1');
+                for (let row = range.s.r; row <= range.e.r; row++) {
+                    for (let col = range.s.c; col <= range.e.c; col++) {
+                        const cellAddress = XLSX.utils.encode_cell({ r: row, c: col });
+                        const cell = worksheet[cellAddress];
+                        
+                        if (cell && cell.v && typeof cell.v === 'string' && cell.v.startsWith('data:image/')) {
+                            images.push({
+                                id: `cell_${cellAddress}`,
+                                dataUrl: cell.v,
+                                mimeType: cell.v.split(';')[0].split(':')[1],
+                                position: { row: row, col: col },
+                                size: cell.v.length
+                            });
+                            console.log(`✅ Found image in cell ${cellAddress}`);
+                        }
+                    }
+                }
+            }
+            
+            // Method 4: Check for embedded objects in cells
+            if (images.length === 0) {
+                console.log('Checking for embedded objects in cells...');
+                
+                const range = XLSX.utils.decode_range(worksheet['!ref'] || 'A1:A1');
+                for (let row = range.s.r; row <= range.e.r; row++) {
+                    for (let col = range.s.c; col <= range.e.c; col++) {
+                        const cellAddress = XLSX.utils.encode_cell({ r: row, c: col });
+                        const cell = worksheet[cellAddress];
+                        
+                        if (cell && cell.f && cell.f.includes('image')) {
+                            console.log(`Found image reference in cell ${cellAddress}:`, cell);
+                        }
+                    }
+                }
+            }
+            
+            // Method 5: Try to extract from raw workbook data if available
+            if (images.length === 0) {
+                console.log('No images found using standard methods, trying alternative approach...');
+                
+                // This is a fallback method that might work with some Excel files
+                try {
+                    // Check if we can access the raw workbook data
+                    const workbook = worksheet._workbook || worksheet;
+                    if (workbook && workbook.SSF) {
+                        console.log('Found SSF (Shared String Format) data, checking for images...');
+                        // Sometimes images are stored in shared strings
+                    }
+                } catch (altError) {
+                    console.log('Alternative extraction method failed:', altError);
+                }
+            }
+            
+            console.log(`🔍 Image extraction complete. Found ${images.length} images.`);
+            
+            // If still no images found, provide helpful debugging info
+            if (images.length === 0) {
+                console.log('💡 No images found. This could be because:');
+                console.log('   - The Excel file has no embedded images');
+                console.log('   - Images are in a format not supported by XLSX.js');
+                console.log('   - Images are stored in a different location');
+                console.log('   - The Excel file was created with a version that stores images differently');
+                console.log('   - Try saving the Excel file as .xlsx format and re-uploading');
+            }
+            
+        } catch (error) {
+            console.warn('Error extracting images from worksheet:', error);
+        }
+        
+        return images;
+    }
+
     /**
      * Validate file
      */
-- 
2.51.0.windows.1

